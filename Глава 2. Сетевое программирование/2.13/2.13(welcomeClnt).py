#Сервер имен. Спроектируйте и реализуйте сервер имен. Такой сервер отвечает
#за сопровождение базы данных с парами значений "имя хоста-номер порта",
#к которым могут прилагаться строковые описания служб, предоставляемых
#соответствующими серверами. Возьмите за основу один или
#несколько существующих серверов и обеспечьте регистрацию их служб в
#подготовленном вами сервере имен. (Обратите внимание на то, что в данном
#случае эти серверы становятся клиентами сервера имен.)
#Каждый запускаемый клиент не имеет сведений о том, где находится его
#искомый сервер. Эти клиенты, будучи также клиентами сервера имен,
#должны отправлять запрос на сервер имен с указанием того, какого рода
#обслуживание им требуется. Сервер имен в ответ возвращает клиенту пару
#значений "имя хоста-номер порта", чтобы клиент мог затем подключиться
#к соответствующему серверу для обработки своего запроса.
#Дополнительные задания
#1) Предусмотрите на сервере имен кеширование для ускорения формирования
#ответов на часто встречающиеся запросы.
#2) Обеспечьте возможность ведения журналов на сервере имен, чтобы можно
#было следить за тем, какие серверы зарегистрированы и какие службы
#запрашиваются клиентами.
#3) Сервер имен должен периодически выполнять эхо-тестирование зарегистрированных
#хостов по их соответствующим номерам портов для проверки
#того, что данная служба действительно работает. В случае неоднократных
#неудачных проверок сервер должен быть исключен из списка служб.
#Можно реализовать реальные службы на серверах, которые регистрируются
#в службе имен, или просто использовать фиктивные серверы (лишь подтверждающие
#получение запросов).

import socket

HOST, PORT = 'localhost', 5050

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
    sock.connect((HOST,PORT))
    print('Connection with nameServer success')

    sock.sendall('welcome server'.encode('utf-8'))
    data = sock.recv(1024).decode('utf-8')

    serverHOST = data.split('-')[0]
    serverPORT = int(data.split('-')[1])

if serverHOST and serverPORT:
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.connect((serverHOST, serverPORT))
        while True:
            hello = input('Print Hello\n')
            try:
                if hello:
                    sock.sendall(hello.encode('utf-8'))
                    print(sock.recv(1024).decode('utf-8'))
                else:
                    print('Invalid data.')
            except:
                print('Server welcome disconnect')
                break
