#Обработка номеров кредитных карточек. Кроме того, в разделе 1.2 рассматривался
#шаблон реrулярного выражения, предназначенный для сопоставления
#с номерами кредитных карточек (СС), [ 0 - 9 ] { 1 5 , 1 6 } . Однако этот
#шаблон не позволяет выполнять сопоставление с номерами кредитных карточек,
#которые содержат дефисы, разделяющие блоки цифр. Создайте реrулярное
#выражение, которое позволяет вставлять дефисы, но только в обусловленных
#местах. Например, 15-значные номера CC и меют шаблон 4-6-5,
#указывающий на применение формата "четыре цифры, дефис, шесть цифр,
#дефис, пять цифр"; а 16-значные номера CC и меют шаблон "четыре цифры,
#дефис, четыре цифры, дефис, четыре цифры, дефис, четыре цифры".
#Не забудьте предусмотреть с помощью фигурных скобок проверку длины
#всей строки. Дополнительное задание. Существует стандартный алгоритм
#проверки того, я вляется ли номер CC допустимым. Попытайтесь написать
#сценарий, который не только определяет, правильно ли отформатирован
#номер СС, но и проверяет его допустимость.

import re
import random

data = ["1234-1234-1234-1234", "1234-123456-12345", "1234-1234-123-1234", "1234-123456-1234"]
patt = "\d{4}-\d{4}-\d{4}-\d{4}|\d{4}-\d{6}-\d{5}"

for i in data:
    if len(i) == 19 or len(i) == 17:
        m = re.match(patt, i)
        if m is not None:
            print(m.group())
